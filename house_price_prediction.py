# -*- coding: utf-8 -*-
"""House Price Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qKONqgLi2eOmr9I95UMUNaAWe5LwLIJz

Import libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn.datasets
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics

"""Importing the Boost House Price Datasets


"""

house_price_dataset = pd.read_csv("./Data/housing.csv", header=None, delimiter=r'\s+')
print(house_price_dataset)

house_price_dataset.shape

house_price_dataset.head()

house_price_dataset.describe()

# Check for missing values
np.sum(house_price_dataset.isnull()) # We have all the data

# Check for N/A values

np.sum(house_price_dataset.isna())

"""Understanding the correclation between data

1. Positive Correlation -- One increase the other one as well
2. Negative Correlation -- One increase the other one no
"""

correlation = house_price_dataset.corr()

# Constructing heatmap to understand the correlation

plt.figure(figsize=(10,10))
sns.heatmap(correlation,cbar=True, square=True, fmt='.1f', annot=True, annot_kws={'size':8},cmap='Blues')

"""Split data and labels"""

X = house_price_dataset.drop(columns=13, axis= 1)
print(X)
Y = house_price_dataset[13]
print(Y)

"""Splitting the data into Training and Test data"""

class_counts = Y.value_counts()

# Print the class counts to identify those with only one occurrence
print(class_counts)

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Model Training - XGBoost regression model"""

# Loading the model
model = XGBRegressor()

# Training the model
model.fit(X_train, Y_train)



# Accurancy of the training data
training_data_prediction = model.predict(X_train)
# R squared error
score_1 = metrics.r2_score(Y_train, training_data_prediction)
print("R squared error : ", score_1)

# Mean Absolute Error
score_2 = metrics.mean_absolute_error(Y_train, training_data_prediction)
print("Mean Absolute Error : ", score_2)

"""Visualizing the Actual prices and predicted ones

"""

plt.scatter(Y_train, training_data_prediction)
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual Prices vs Predicted Prices")
plt.show()

# Accurancy for the test data
test_data_prediction = model.predict(X_test)
# R squared error
score_1 = metrics.r2_score(Y_test, test_data_prediction)
print("R squared error : ", score_1)

# Mean Absolute Error
score_2 = metrics.mean_absolute_error(Y_test, test_data_prediction)
print("Mean Absolute Error : ", score_2)

"""Make a prediction"""

